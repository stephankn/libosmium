#ifndef OSMIUM_OSM_WAY_HPP
#define OSMIUM_OSM_WAY_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <cassert>
#include <cstddef>
#include <cstdlib>

#include <osmium/memory/collection.hpp>
#include <osmium/memory/item.hpp>
#include <osmium/osm/item_type.hpp>
#include <osmium/osm/location.hpp>
#include <osmium/osm/object.hpp>
#include <osmium/osm/types.hpp>
#include <osmium/osm/noderef.hpp>

namespace osmium {

    namespace memory {
        template <class T> class ObjectBuilder;
    }

    class WayNodeList : public osmium::memory::Collection<NodeRef, osmium::item_type::way_node_list> {

    public:

        WayNodeList():
            osmium::memory::Collection<NodeRef, osmium::item_type::way_node_list>() {
        }

        size_t size() const noexcept {
            assert((byte_size() - sizeof(WayNodeList)) % sizeof(NodeRef) == 0);
            return (byte_size() - sizeof(WayNodeList)) / sizeof(NodeRef);
        }

        const NodeRef& operator[](size_t n) const {
            const NodeRef* node_ref = &*begin();
            return node_ref[n];
        }

        const NodeRef& front() const {
            return operator[](0);
        }

        const NodeRef& back() const {
            return operator[](size()-1);
        }

        bool is_closed() const {
            return front().ref() == back().ref();
        }

        bool ends_have_same_id() const {
            return front().ref() == back().ref();
        }

        bool ends_have_same_location() const {
            return front().location() == back().location();
        }

        void switch_type_to_outer_ring() {
            type(osmium::item_type::outer_ring);
        }

    }; // class WayNodeList


    class Way : public Object {

        friend class osmium::memory::ObjectBuilder<osmium::Way>;

        Way() :
            Object(sizeof(Way), osmium::item_type::way) {
        }

    public:

        WayNodeList& nodes() {
            return subitem_of_type<WayNodeList>();
        }

        const WayNodeList& nodes() const {
            return subitem_of_type<const WayNodeList>();
        }

        /**
         * Update all nodes in a way with the ID of the given NodeRef with the
         * location of the given NodeRef.
         */
        void update_node_location(const NodeRef& new_node_ref) {
            for (auto& node_ref : nodes()) {
                if (node_ref.ref() == new_node_ref.ref()) {
                    node_ref.location(new_node_ref.location());
                }
            }
        }

        /**
         * Do the nodes in this way form a closed ring?
         */
        bool is_closed() const {
            return nodes().is_closed();
        }

        bool ends_have_same_id() const {
            return nodes().ends_have_same_id();
        }

        bool ends_have_same_location() const {
            return nodes().ends_have_same_location();
        }

        /**
         * Switch the type of this object to Area. This should only be done when
         * the nodes form a closed ring. This will also change the Id of the way
         * to make sure Area Ids are unique.
         */
        void switch_type_to_area() {
            assert(ends_have_same_location());
            type(osmium::item_type::area);
            nodes().switch_type_to_outer_ring();
            osmium::object_id_type new_id = positive_id() * 2;
            if (id() < 0) {
                new_id = - new_id;
            }
            id(new_id);
        }

    }; // class Way

    static_assert(sizeof(Way) % osmium::memory::align_bytes == 0, "Class osmium::Way has wrong size to be aligned properly!");

} // namespace osmium

#endif // OSMIUM_OSM_WAY_HPP

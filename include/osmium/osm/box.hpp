#ifndef OSMIUM_OSM_BOX_HPP
#define OSMIUM_OSM_BOX_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/osm/location.hpp>

namespace osmium {

    /**
     * Bounding box.
     */
    class Box {

        osmium::Location m_bottom_left;
        osmium::Location m_top_right;

    public:

        /**
         * Create undefined Box. Use the extend() function
         * to add actual bounds.
         */
        constexpr Box() :
            m_bottom_left(),
            m_top_right() {
        }

        Box(const Box&) = default;
        Box(Box&&) = default;
        Box& operator=(const Box&) = default;
        Box& operator=(Box&&) = default;
        ~Box() = default;

        /**
         * Extend the bounding box by the given location. If the
         * location is undefined, the bounding box is unchanged.
         */
        Box& extend(const Location& location) noexcept {
            if (location) {
                if (m_bottom_left) {
                    if (location.x() < m_bottom_left.x()) {
                        m_bottom_left.x(location.x());
                    }
                    if (location.x() > m_top_right.x()) {
                        m_top_right.x(location.x());
                    }
                    if (location.y() < m_bottom_left.y()) {
                        m_bottom_left.y(location.y());
                    }
                    if (location.y() > m_top_right.y()) {
                        m_top_right.y(location.y());
                    }
                } else {
                    m_bottom_left = location;
                    m_top_right = location;
                }
            }
            return *this;
        }

        /**
         * Box are defined, ie. contains defined coordinates.
         */
        explicit constexpr operator bool() const noexcept {
            return static_cast<bool>(m_bottom_left);
        }

        /**
         * Box are valid, ie. defined and inside usual bounds
         * (-180<=lon<=180, -90<=lat<=90).
         */
        constexpr bool valid() const noexcept {
            return bottom_left().valid() && top_right().valid();
        }

        /**
         * Bottom-left location.
         */
        constexpr Location bottom_left() const noexcept {
            return m_bottom_left;
        }

        /**
         * Top-right location.
         */
        constexpr Location top_right() const noexcept {
            return m_top_right;
        }

        /**
         * Calculate size of the box in square degrees.
         */
        double size() const {
            return (m_top_right.lon() - m_bottom_left.lon()) *
                   (m_top_right.lat() - m_bottom_left.lat());
        }

    }; // class Box

    /**
     * Boxes are equal if both locations are equal.
     */
    inline constexpr bool operator==(const Box& lhs, const Box& rhs) noexcept {
        return lhs.bottom_left() == rhs.bottom_left() && lhs.top_right() == rhs.top_right();
    }

} // namespace osmium

#endif // OSMIUM_OSM_BOX_HPP
